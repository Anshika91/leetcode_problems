class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1) return n;
        vector<int> lengths(n, 0);
        vector<int> counts(n, 1);
        
        int maxlen = 0;
        int ans = 0;
        
        for(int j = 0; j < n; j++){
            for(int i = 0; i < j; i++){
                //[0...i] and [0...j] which j > i
                if(nums[i] < nums[j]){
                    if(lengths[i] >= lengths[j]){
                        /*
                        lengths[i] + 1 > lengths[j]
                        so we discard the previously found LIS ending at nums[j],
                        instead just use what extends from LIS ending at nums[i]
                        */
                        lengths[j] = lengths[i] + 1;
                        //LIS ending at j is extending from LIS ending at i
                        counts[j] = counts[i];
                    }else if(lengths[i] + 1 == lengths[j]){
                        /*
                        [0...j] can be generated by [0...i] plus nums[j]
                        the previous found LIS ending at j are reserved
                        */
                        counts[j] += counts[i];
                    }
                }
            }
            
            if(maxlen < lengths[j]){
                /*
                current found LIS's length is the longest,
                so overwrite the info about what we previous found
                */
                maxlen = lengths[j];
                ans = counts[j];
            }else if(maxlen == lengths[j]){
                //accumulate the count of LIS with length equal to maxlen
                ans += counts[j];
            }
        }
        
        return ans;
    }
};
